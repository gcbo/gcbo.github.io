<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FStoneCapture逆向分析</title>
      <link href="/2020/02/18/FStoneCapture%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
      <url>/2020/02/18/FStoneCapture%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="http://www.faststone.org" target="_blank" rel="noopener">FastStone Capture</a> 是一款抓屏工具，体积小巧、功能强大。我也是在不经意间使用下载了此软件，并不知道这是一款商用软件，用了一段时间竟然出现使用结束对话框。<br> <a href="fs试用版本.PNG" data-fancybox="group" data-caption="试用版本" class="fancybox"><img width="40%" alt="试用版本" align="center" title="试用版本" data-src="fs试用版本.PNG" src="/img/loading.gif" class="lazyload"></a></p><p>本着好奇心和认真学习的态度尝试逆向此软件。</p><hr><h1 id="01-样本概况"><a href="#01-样本概况" class="headerlink" title="01-样本概况"></a>01-样本概况</h1><h2 id="1-1-应用程序信息"><a href="#1-1-应用程序信息" class="headerlink" title="1.1-应用程序信息"></a>1.1-应用程序信息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">软件名称：FastStone Capture</span><br><span class="line">产品版本：9.0</span><br><span class="line">名称: FSCapture.exe</span><br><span class="line">大小: 5668864 字节 (5536 KiB)</span><br><span class="line">CRC32: F37FA650</span><br><span class="line">SHA256: 1D9620FE0004E48CBD382A110AD50EED913C85B7374ED1F02205DA1599460BE6</span><br><span class="line">SHA1: 49F715359E3CB092FFA2DD3432EFDFE1C11C4749</span><br><span class="line">这是一个汉化版本，以下结果英文版也适用。</span><br></pre></td></tr></tbody></table></figure></div><h2 id="1-2-分析环境及工具"><a href="#1-2-分析环境及工具" class="headerlink" title="1.2-分析环境及工具"></a>1.2-分析环境及工具</h2><ul><li>系统环境：Windows10-64位、Windows7-32位</li><li>工具：x64dbg、IDA、IDR-Delphi反编译</li></ul><h2 id="1-3-分析目标"><a href="#1-3-分析目标" class="headerlink" title="1.3-分析目标"></a>1.3-分析目标</h2><ul><li>分析算法，编写注册机</li></ul><h1 id="02-具体分析过程"><a href="#02-具体分析过程" class="headerlink" title="02-具体分析过程"></a>02-具体分析过程</h1><h2 id="2-1-可执行文件信息"><a href="#2-1-可执行文件信息" class="headerlink" title="2.1-可执行文件信息"></a>2.1-可执行文件信息</h2><ol><li>放入PEID<a href="fs_peid.png" data-fancybox="group" data-caption="程序注册框" class="fancybox"><img width="40%" alt="程序注册框" title="程序注册框" data-src="fs_peid.png" src="/img/loading.gif" class="lazyload"></a>Delphi编写，并且无壳。</li><li>运行程序，错误提示<a href="fs_注册框.png" data-fancybox="group" data-caption="错误提示" class="fancybox"><img width="40%" alt="错误提示" title="错误提示" data-src="fs_注册框.png" src="/img/loading.gif" class="lazyload"></a></li></ol><h2 id="2-2-定位关键函数"><a href="#2-2-定位关键函数" class="headerlink" title="2.2-定位关键函数"></a>2.2-定位关键函数</h2><ol><li><p>将程序载入x64dbg和IDR，在一些通获取用户输入的API下断点，或是搜错误提示字符串。</p><a href="fs_IDR_字符串搜索.png" data-fancybox="group" data-caption="IDR字符搜索结果" class="fancybox"><img width="40%" alt="IDR字符搜索结果" title="IDR字符搜索结果" data-src="fs_IDR_字符串搜索.png" src="/img/loading.gif" class="lazyload"></a>可以看出这个程序至少包含5种以上的许可证。</li><li><p>定位到以上字符串地址，能在附近找到注册回调函数。</p><a href="fs_IDR_按钮点击注册.png" data-fancybox="group" data-caption="注册按钮回调函数" class="fancybox"><img width="40%" alt="注册按钮回调函数" title="注册按钮回调函数" data-src="fs_IDR_按钮点击注册.png" src="/img/loading.gif" class="lazyload"></a>一旦定位了关键函数，分析已经是胜利一半了，接下来要结合x64dbg和IDR就能较快分析程序具体流程。</li></ol><h2 id="2-2-分析关键函数"><a href="#2-2-分析关键函数" class="headerlink" title="2.2-分析关键函数"></a>2.2-分析关键函数</h2><p>假设输入的名字为hello,注册码为APAMAIBDBBCCCCCDDDDD</p><ol><li>经过分析，可以了解到注册函数的整体框架，一共5次分支(命名为关卡)，无论那次失败，最终跳转到错误提示，关卡1到5依次判断。<a href="fs_程序整体框架.png" data-fancybox="group" data-caption="程序整体框架" class="fancybox"><img width="40%" alt="程序整体框架" title="程序整体框架" data-src="fs_程序整体框架.png" src="/img/loading.gif" class="lazyload"></a></li><li>接下来看看进入这些关卡前程序是如何处理名字(注册名)和注册码。<a href="fs_获取控件内容.png" data-fancybox="group" data-caption="获取控件内容" class="fancybox"><img width="40%" alt="获取控件内容" title="获取控件内容" data-src="fs_获取控件内容.png" src="/img/loading.gif" class="lazyload"></a>可以看出，注册码被转化为大写，其实在注册码输入框中显示就是大写字母(无论是否切换大小写),之后便判断注册码的长度，如果为0，注册失败。</li><li>接下来是一个遍历注册码(大写)的大循环，每隔5字母中添加一个字符’-‘，最后产生一个新的字符串。<a href="fs_注册码添加'-'.png" data-fancybox="group" data-caption="添加字符'-'" class="fancybox"><img width="40%" alt="添加字符'-'" title="添加字符'-'" data-src="fs_注册码添加'-'.png" src="/img/loading.gif" class="lazyload"></a></li><li>关卡1的分析，输入3得到的字符串，将其中的字符’-‘去掉，获得新的字符串。<a href="fs_关卡1关键函数.png" data-fancybox="group" data-caption="关卡1关键函数" class="fancybox"><img width="40%" alt="关卡1关键函数" title="关卡1关键函数" data-src="fs_关卡1关键函数.png" src="/img/loading.gif" class="lazyload"></a>这是关键函数，判断新的字符串是否在一个列表中，在其中的话，关卡1输出1，不在输出0，猜测应该是有系列被'拉黑'的非法注册码，要保证合法的注册码不在其中，至于这个列表中到底有那些字符串，并未去深挖，但从运行结果来看，似乎无论输入什么注册码，关卡1总是输出0，就好像是摆设一样，所以对其并为过多深究。</li><li>关卡2与关卡1类似功能。</li><li>关卡3的分析，输入步骤3得到的字符串和名字<a href="fs_关卡3.png" data-fancybox="group" data-caption="关卡3" class="fancybox"><img width="40%" alt="关卡3" title="关卡3" data-src="fs_关卡3.png" src="/img/loading.gif" class="lazyload"></a>要找到什么会影响关卡3的输出<a href="关卡3-核心函数1.png" data-fancybox="group" data-caption="关卡3-核心函数1" class="fancybox"><img width="40%" alt="关卡3-核心函数1" title="关卡3-核心函数1" data-src="关卡3-核心函数1.png" src="/img/loading.gif" class="lazyload"></a>会运行两次关卡3-核心函数1，如果两次都输出为0,那么关卡3输出为0。 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">关卡3-核心函数1的分析</span><br><span class="line">1. 将名字，注册码变成大写</span><br><span class="line">2. 注册码长度应该为20，将注册码中‘-’去掉</span><br><span class="line">3. 提取注册码前8位APAMAIBD</span><br><span class="line">4. 将3得到的注册码放置在名字偶数位中得到HAEPLALMOAIBD</span><br><span class="line">5. 将3得到的注册码另外两个字符串连接</span><br><span class="line">'me4T6cBLV'+</span><br><span class="line">'APAMAIBD'+</span><br><span class="line">'CpCwxrvCJZ30pKLu8Svxjhnhut437glCpofVssnFeBh2G0ekUq4VcxFintMix52vL0iJNbdtWqHPyeumkDUC+4AaoSX+xpl56Esonk4='</span><br><span class="line">6. 根据5得到的字符串用sha1生成blowfish的秘钥</span><br><span class="line">7. 将3得到的注册码与'96338'与4得到的字符串连接</span><br><span class="line">'APAMAIBD'+</span><br><span class="line">'96338'+</span><br><span class="line">'HAEPLALMOAIBD'</span><br><span class="line">8. 根据7得到的字符串用sha512生成idea的秘钥</span><br><span class="line">9. 应用6中的加密系统加密4得到的字符串</span><br><span class="line">GbMe/oqPxOzcvxCYhw==</span><br><span class="line">10. 应用8中的加密系统加密9得到的字符串</span><br><span class="line">aEW7fyam24ntMXjODZBOTMDNPLQ=</span><br><span class="line">11. 提取10中的前8个大写字母</span><br><span class="line">EWMXODZB</span><br><span class="line">12, 比较注册码后8位与11得到的字符串相同则结果为1</span><br></pre></td></tr></tbody></table></figure></div><a href="用sha1生成blowfish密钥.png" data-fancybox="group" data-caption="用sha1生成blowfish密钥" class="fancybox"><img width="40%" alt="用sha1生成blowfish密钥" title="用sha1生成blowfish密钥" data-src="用sha1生成blowfish密钥.png" src="/img/loading.gif" class="lazyload"></a><a href="关卡3-核心函数1核心比较.png" data-fancybox="group" data-caption="关卡3-核心函数1核心比较" class="fancybox"><img width="40%" alt="关卡3-核心函数1核心比较" title="关卡3-核心函数1核心比较" data-src="关卡3-核心函数1核心比较.png" src="/img/loading.gif" class="lazyload"></a>可以简单总结为，注册码前8位和名字决定了注册码的9-16位。分别用了两次对称加密算法，加密算法用了分别用了SHA1和SHA512来计算密钥。用python来计算生成密钥，结果与程序一致，但是加密结果却不一致，原因未知。</li><li>关卡4与与关卡3类似，也有一个关卡4-核心函数1。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">关卡4-核心函数1的分析</span><br><span class="line">1. 将名字，注册码变成大写</span><br><span class="line">2. 注册码长度为20 将注册码中‘-’去掉</span><br><span class="line">3. 提取注册码前8位 APAMAIBD </span><br><span class="line">4. 将3得到的注册码放置在名字偶数位中得到HAEPLALMOAIBD</span><br><span class="line">5. 根据以下字符串(常量)用sha512生成blowfish的秘钥</span><br><span class="line">09232849248398340903834873297239340547237623242043324398489390309284343843223493299435</span><br><span class="line">6. 将3得到的注册码与'96338'与4得到的字符串连接</span><br><span class="line">'APAMAIBD'+</span><br><span class="line">'96338'+</span><br><span class="line">'HAEPLALMOAIBD'</span><br><span class="line">7. 根据6得到的字符串用sha1生成idea的秘钥</span><br><span class="line">8. 用3字符的第一个字母('A')减去0x32得到一个数n=0xF用4得到的字符串,不断用idea加密,次数为n+1得到BQpsiNnacbPngmqP9A==</span><br><span class="line">9. 用blwofish加密8得到的字符串</span><br><span class="line">OgWxUNe+KiqNEnaNt0bk769Yg3A=</span><br><span class="line">10. 提取9中的前4个大写字母</span><br><span class="line">OWUN</span><br><span class="line">11. 比较注册码后4位与10得到的字符串，相同则结果为1</span><br></pre></td></tr></tbody></table></figure></div><a href="用sha512生成blowfish密钥.png" data-fancybox="group" data-caption="用sha512生成blowfish密钥" class="fancybox"><img width="40%" alt="用sha512生成blowfish密钥" title="用sha512生成blowfish密钥" data-src="用sha512生成blowfish密钥.png" src="/img/loading.gif" class="lazyload"></a><a href="循环加密过程.png" data-fancybox="group" data-caption="循环加密过程" class="fancybox"><img width="40%" alt="循环加密过程" title="循环加密过程" data-src="循环加密过程.png" src="/img/loading.gif" class="lazyload"></a><a href="关卡4-核心函数1核心比较.png" data-fancybox="group" data-caption="关卡4-核心函数1核心比较" class="fancybox"><img width="40%" alt="关卡4-核心函数1核心比较" title="关卡4-核心函数1核心比较" data-src="关卡4-核心函数1核心比较.png" src="/img/loading.gif" class="lazyload"></a>也可以总结为，注册码前8位和名字决定了注册码的后4位。用了与关卡3-核心函数1一样的加密算法，但计算密钥的方法调换了。</li><li>通过步骤关卡3和关卡4的分析可知，注册码长20位，可以根据注册码前8位和名字计算出整个注册码。接下来关卡5的分析。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">关卡5分析</span><br><span class="line">1. 将名字，注册码变成大写</span><br><span class="line">2. 注册码长度为20 将注册码中‘-’去掉</span><br><span class="line">3. 依次将注册码第4,8,6,2位提取，减去一个常数，转化为字符</span><br><span class="line">第4个 - 4d  > M  </span><br><span class="line">  8   - 44  > D</span><br><span class="line">  6   - 49  > I</span><br><span class="line">  2   - 4f  > O</span><br><span class="line">以上4字符个依次连接，并将生成的字符串转化为数字，要保证数字大于等于1</span><br></pre></td></tr></tbody></table></figure></div>也就是说第4，8，6，2位上的字母需要分别为’M’,’D’,’I’,’O’之后的字母才能保证结果大于等于1。这个结果的大小决定了到底使用了那种许可证。</li><li>综上述，最终的注册码应该为APAMAIBDEWMXODZBOWUN <a href="注册成功.png" data-fancybox="group" data-caption="注册成功" class="fancybox"><img width="40%" alt="注册成功" title="注册成功" data-src="注册成功.png" src="/img/loading.gif" class="lazyload"></a><a href="单一用户许可证.png" data-fancybox="group" data-caption="单一用户许可证" class="fancybox"><img width="40%" alt="单一用户许可证" title="单一用户许可证" data-src="单一用户许可证.png" src="/img/loading.gif" class="lazyload"></a></li><li>显示注册成功之后还有一个步骤，写入数据库，可以通过在读写文件API下断点分析其如何存储用户名以及注册码。</li></ol><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><p>本来想用python写注册机，但发现blowfish加密结果与程序实际加密结果不一致，未能编写成功，故尝试用x64dbg脚本。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
          <category> reverse engineering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> x64dbg, </tag>
            
            <tag> FastStone Capture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串漏洞</title>
      <link href="/2020/02/13/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/02/13/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><h2 id="printf-函数声明"><a href="#printf-函数声明" class="headerlink" title="printf()函数声明"></a>printf()函数声明</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, arg1,arg2,arg3,...)</span></span></span><br></pre></td></tr></tbody></table></figure></div><p>format是字符串，其中，每个”%格式化控制符”对应了一个参数列表的参数，用于解释参数如何输出，”%格式化控制符”可以有以下情况：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%d - 十进制 - 输出十进制整数</span><br><span class="line">%s - 字符串 - 从内存中读取字符串</span><br><span class="line">%x - 十六进制 - 输出十六进制数</span><br><span class="line">%c - 字符 - 输出字符</span><br><span class="line">%p - 指针 - 指针地址</span><br><span class="line">%n - 计算到目前为止所输出的字符数，写入对应位置的参数，该参数为一个地址</span><br></pre></td></tr></tbody></table></figure></div><h2 id="printf-函数栈结构"><a href="#printf-函数栈结构" class="headerlink" title="printf()函数栈结构"></a>printf()函数栈结构</h2><a href="/2020/02/13/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/printf%E6%A0%88%E7%BB%93%E6%9E%84.PNG" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="lazyload" title="[title]" data-src="/2020/02/13/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/printf%E6%A0%88%E7%BB%93%E6%9E%84.PNG" src="/img/loading.gif"></a></body></html>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
          <category> string format </category>
          
      </categories>
      
      
        <tags>
            
            <tag> printf </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
